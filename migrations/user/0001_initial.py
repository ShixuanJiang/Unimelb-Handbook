# Generated by Django 4.2 on 2023-11-09 16:05

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registrationDate', models.DateTimeField(auto_created=True, auto_now=True, verbose_name='注册日期')),
                ('phone', models.CharField(auto_created=True, blank=True, default='123456', help_text='手机号', max_length=11, verbose_name='手机号')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_delete', models.BooleanField(default=False, verbose_name='是否软删除')),
                ('sub_channel_ids', models.TextField(blank=True, null=True, verbose_name='子渠道ID列表')),
                ('is_child_user', models.BooleanField(default=False, verbose_name='是否为子渠道用户')),
                ('sub_channel_id', models.TextField(blank=True, default='', null=True, verbose_name='子渠道id')),
                ('name', models.CharField(blank=True, default='杜辉锋', max_length=255, null=True, verbose_name='名字')),
                ('job', models.CharField(blank=True, default='杜辉锋', max_length=255, null=True, verbose_name='工作')),
                ('jobName', models.CharField(blank=True, default='杜辉锋', max_length=255, null=True, verbose_name='工作名称')),
                ('organizationName', models.TextField(blank=True, default='Front', null=True, verbose_name='组织名称')),
                ('locationName', models.TextField(blank=True, default='福州', null=True, verbose_name='位置名称')),
                ('avatar', models.URLField(blank=True, default='https://ytouch-1258011219.cos.ap-nanjing.myqcloud.com/ww.jpg', null=True, verbose_name='头像')),
                ('organization', models.TextField(blank=True, default='Front', null=True, verbose_name='组织')),
                ('location', models.TextField(blank=True, default='福州', null=True, verbose_name='位置')),
                ('introduction', models.TextField(blank=True, default='有福之人', null=True, verbose_name='介绍')),
                ('personalWebsite', models.URLField(blank=True, default='http://www.baidu.com', null=True, verbose_name='个人网站')),
                ('accountId', models.CharField(blank=True, default='1233', max_length=255, null=True, verbose_name='账号id')),
                ('certification', models.IntegerField(default=1, verbose_name='认证类型')),
                ('role', models.CharField(blank=True, default='admin', max_length=255, null=True, verbose_name='角色')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户表',
                'verbose_name_plural': '用户表',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ServerData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=250, unique=True, verbose_name='参数')),
                ('value', models.TextField(verbose_name='值')),
            ],
            options={
                'verbose_name': '服务数据',
                'verbose_name_plural': '服务数据',
            },
        ),
        migrations.CreateModel(
            name='UserLoggerInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logger_info', models.TextField(blank=True, help_text='日志内容记录', null=True, verbose_name='日志内容')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='归属用户')),
            ],
            options={
                'verbose_name': '用户日志记录表',
                'verbose_name_plural': '用户日志记录表',
            },
        ),
    ]
